const https = require('https');
const http = require('http');
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
var debug = require('debug')('chatbottest:server');
const config = require('../config');
const reply = require('../reply');

const actionBasic = require('../action/basic');
const actionHelp = require('../action/help');
const actionEnjoy = require('../action/enjoy');
const actionScheduler = require('../action/scheduler');

var app = express();


var port = normalizePort(process.env.PORT || '3000');


app.set('port', port);


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


app.use(bodyParser.json());

app.get('/', function(req, res, next) {
    console.log(config.CHANNEL_ACCESS_TOKEN);
    res.writeHead(200, {'Content-Type' : 'text/html'});
    res.write('<h3>Welcome</h3>');
    res.write('<span>hello world </span>');
    res.end();
});

app.get('/hook', function (reqeust, response) {
    response.writeHead(200, {'Content-Type' : 'text/html'});
    response.end('<h1>chatbot - skwjdgn@naver.com<h1>');
});

app.post('/hook', function (request, response) {

    var eventObj = request.body.events[0];
    var source = eventObj.source;
    var message = eventObj.message;

    // request log
    console.log('======================', new Date() ,'======================');
    console.log('[request]', request.body);
    console.log('[request source] ', eventObj.source);
    console.log('[request message]', eventObj.message);

    if(message.type == "text" && message.text.indexOf("@momo") != -1){
        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionBasic.getBasicExpress());
    }
    else if(message.type == "text" && /^@.+/g.test(message.text)){
        var cmd = message.text.split('@')[1];
        console.log('[command]', cmd);

        if(typeof cmd !== "undefined" && cmd != ""){
            if(cmd == "h" || cmd == "help"){
                reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionHelp.getHelpExpress());
            }
            else if(/^r\[.+\]/g.test(cmd)){
                reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionEnjoy.getRandomExpress(cmd));
            }
            else if(cmd == "food" || cmd == "밥집"){
                reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionEnjoy.getFoodExpress());
            }
            else if(cmd == "contact" || cmd == "ct"){
                reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionHelp.getContactExpress());
            }
            else if(/^reserve/g.test(cmd) || /^예약/g.test(cmd)){

                var receiverId = null;
                var dropCmdMessages = cmd.split('reserve ')[1];

                switch (source.type){
                    case "user" : receiverId = source.userId; break;
                    case "group" : receiverId = source.groupId; break;
                    case "room" : receiverId = source.roomId; break;
                }

                if(dropCmdMessages.indexOf('-l') != -1){
                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionScheduler.getReservedList(receiverId));
                }
                else if(dropCmdMessages.indexOf('-r') != -1){
                    var scheduledId = dropCmdMessages.replace('-r', '').trim();
                    var removeItemInfo = actionScheduler.removeReservedItem(receiverId, scheduledId);
                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionScheduler.gerRemoveMessage(removeItemInfo))
                }
                else{
                    var onceFlag = true;
                    var data = actionScheduler.reserveParser(dropCmdMessages);

                    if(dropCmdMessages.indexOf('-once') == -1){
                        onceFlag = false;
                    }

                    if(dropCmdMessages.indexOf('-once') == -1){
                        onceFlag = false;
                    }

                    actionScheduler.setReserve(config.CHANNEL_ACCESS_TOKEN, receiverId, data.time, data.message, onceFlag);
                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionScheduler.getReservedMessage(data.time, data.message, !onceFlag))
                }
            }

        }
    }

    response.sendStatus(200);
});
//


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
