const https = require('https');
const http = require('http');
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
var debug = require('debug')('chatbottest:server');
const config = require('../config');
const reply = require('../reply');

const actionBasic = require('../action/basic');
const actionConcierge = require('../action/concierge');
const actionHelp = require('../action/help');
const actionEnjoy = require('../action/enjoy');
const actionScheduler = require('../action/scheduler');

var app = express();

var session = require('express-session');


app.use(session({
    secret:'@#@$MYSIGN#@$#$',
    resave:false,
    saveUninitialized: true
}));




var port = normalizePort(process.env.PORT || '3000');


app.set('port', port);


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


app.use(bodyParser.json());

app.get('/', function(req, res, next) {
    var sess = req.session;
    if (sess.views) {
        sess.views++
        res.setHeader('Content-Type', 'text/html')
        res.write('<p>views: ' + sess.views + '</p>')
        res.write('<p>id: ' + sess.id + '</p>')
        res.write('<p>expires in: ' + (sess.cookie.maxAge / 1000) + 's</p>')
        res.end()
    } else {
        sess.views = 1
        res.end('welcome to the session demo. refresh!')
    }
});

app.get('/hook', function (reqeust, response) {
    response.writeHead(200, {'Content-Type' : 'text/html'});
    response.end('<h1>chatbot - skwjdgn@naver.com<h1>');
});

var sess;
var i = 0;
app.post('/hook', function (request, response) {
    if(sess === null || sess === '' || sess === undefined){
        sess = request.session;
        sess.username[i] = null;
    }else{

    }

    var eventObj = request.body.events[0];
    var source = eventObj.source;
    var message = eventObj.message;


    // request log
    console.log('======================', new Date() ,'======================');
    console.log('[request]', request.body);
    console.log('[request source] ', eventObj.source);
    console.log('[request message]', eventObj.message);

    if(message.type == "text" && message.text.indexOf("인집사") != -1){

        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionBasic.getBasicExpress());
    }
    else if(message.type == "text" && message.text.indexOf("인집사") === -1){

        if(message.text.indexOf("컨시어지") != -1){

            if(sess.username[i] === null || sess.username[i] === '' || sess.username[i] === undefined){
                sess.username[i] = eventObj.source.userId;
                console.log("새로만든세션"+sess.username[i]);
            }else{

                if(eventObj.source.userId !== sess.username[i]){
                    for(var j = 0; j<sess.username.length; j++){
                        if(sess.username[j] ===  eventObj.source.userId) {
                            i = j;
                            console.log("돌아온세션"+sess.username[i]);
                        }else{
                            sess.username[i+1] =  eventObj.source.userId;
                            i++;
                            console.log("바뀐세션"+sess.username[i]);
                        }

                    }
                }else{
                    console.log("기존세션"+sess.username[i]);
                }
               
            }

            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("start",'컨시어지'));
        }else if(message.text.indexOf("상업공간") != -1){
            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces1",'상업공간'));
        } else if(message.text.indexOf("업무공간") != -1){
            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces1",'업무공간'));
        }else if(message.text.indexOf("주거공간") != -1){
            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces1",'주거공간'));
        }else if(message.text.indexOf("문화/종교공간") != -1){
            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces1",'문화/종교공간'));
        }else if(message.text.indexOf("기타공간") != -1){
            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces1",'기타공간'));
        }else{
            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionBasic.getBasicExpress());
        }


    }

    response.sendStatus(200);
});
//


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
