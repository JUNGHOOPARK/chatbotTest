const https = require('https');
const http = require('http');
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
var debug = require('debug')('chatbottest:server');
const config = require('../config');
const reply = require('../reply');
const ntReply = require('../ntReply');
const actionBasic = require('../action/basic');
const actionConcierge = require('../action/concierge');
const actionNtConcierge = require('../action/ntConcierge');
const actionHelp = require('../action/help');
const actionEnjoy = require('../action/enjoy');
const actionScheduler = require('../action/scheduler');

var app = express();

var session = require('express-session');


app.use(session({
    secret:'@#@$MYSIGN#@$#$',
    resave:false,
    saveUninitialized: true
}));




var port = normalizePort(process.env.PORT || '3000');


app.set('port', port);


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


app.use(bodyParser.json());

app.get('/', function(req, res, next) {
    var sess = req.session;
    if (sess.views) {




        sess.views++
        res.setHeader('Content-Type', 'text/html')
        res.write('<p>views: ' + sess.views + '</p>')

        res.write('<p>expires in: ' + (sess.cookie.maxAge / 1000) + 's</p>')
        res.end()
    } else {
        sess.views = 1
        res.end('welcome to the session demo. refresh!')
    }
});


var defaultResponse = {
    success: true,
    resultCode: "00",
    resultMessage: "success"
};
var ntSession;
var ii = 0;
app.post('/naverTalkTalk', function (req, res) {

    if(ntSession === null || ntSession === '' || ntSession === undefined){
        ntSession = req.session;
        ntSession.username = [];
        ntSession.username[ii] = req.body.user;
        ntSession.concierge = [];
        ntSession.concierge[ii] = false;
        ntSession.spaces1 = [];
        ntSession.spaces1[ii] = false;
        ntSession.spaces2 = [];
        ntSession.spaces2[ii] = false;
        ntSession.spaces3 = [];
        ntSession.spaces3[ii] = false;
        ntSession.specialtyRangeYN = [];
        ntSession.specialtyRangeYN[ii] = false;
        ntSession.spaceBrandingYN = [];
        ntSession.spaceBrandingYN[ii] = false;
        ntSession.spaceMeasure = [];
        ntSession.spaceMeasure[ii] = false;
        ntSession.budget = [];
        ntSession.budget[ii] = false;
        ntSession.stylesYN = [];
        ntSession.stylesYN[ii] = false;
        ntSession.estimate_Type = "interior";
        ntSession.spacesCategory = [];
        ntSession.spacesSubCategory = [];
        ntSession.spacesSpace = [];
        ntSession.specialtyRange = [];
        ntSession.spaceBranding = [];
        ntSession.py = [];
        ntSession.meter = [];
        ntSession.budgetMin = [];
        ntSession.budgetMax = [];
        ntSession.styles = [];


    }else{
        //세션새로 생성
        if(ntSession.username[ii] === null || ntSession.username[ii] === '' || ntSession.username[ii] === undefined){
            ntSession.username[ii] = req.body.user;
        }else{

            if(req.body.user !== ntSession.username[ii]){
                for(var j = 0; j<ntSession.username.length; j++){
                    //세션 변경
                    if(ntSession.username[j] ===  req.body.user) {
                        //기존 세션
                        ii = j;
                        break;
                    }else{
                        //바뀌는 세션
                        ntSession.username[ii+1] = req.body.user;
                        ii++;
                        break;
                    }
                }
            }else{

            }

        }
    }

    console.log(req.body);

    var textResponse = {
        success: true,
        resultCode: "00",
        resultMessage: "success",
        request: {
            event: "send",
            sender: "partner",
            user : req.body.user,
            partner: req.body.partner,
            textContent :{}
        }
    };
    var imgResponse = {
        success: true,
        resultCode: "00",
        resultMessage: "success",
        request: {
            event: "send",
            sender: "partner",
            user : req.body.user,
            partner: req.body.partner,
            imageContent :{}
        }
    };
    switch(req.body.event) {
        case 'send' :
            if(req.body.sender == 'user' && req.body.textContent) {
            var text = req.body.textContent.text;

                // textResponse.request.textContent.text = 'echo: ' + req.body.textContent.text;
                res.json(textResponse);

                if(text.indexOf("컨시어지") != -1){

                    ntSession.concierge[ii] = true;
                    ntSession.spaces1[ii] = true;
                    res.json(actionNtConcierge.getConciergeExpress("spaces1",req.body));

                }








            } else {
                res.json(defaultResponse);
            }
            break;
        case 'open' :
            switch(req.body.options.inflow) {
                case 'list' :
                    textResponse.request.textContent.text = '리스트에서 눌러서 방문하셨네요.';
                    res.json(textResponse);
                    break;
                case 'none' :

                  /*  textResponse.request.textContent.text = '화면을 갱신하셨네요.';

                    res.json(textResponse);*/

                    imgResponse.request.imageContent.imageUrl = "https://interiorbrothers.com/img/main/qualityPortfolios.png";
                    imgResponse.request.imageContent.height = 300;
                    imgResponse.request.imageContent.width = 300;
                    res.json(imgResponse);

                    // ntReply.send(req.body.user,'화면을 갱신하셨네요.');
                    break;
                default:
                    res.json(defaultResponse);
            }
            break;
        case 'friend' :
            if(req.body.options.set == 'on') {
                textResponse.request.textContent.text = '인집사: 친구가되어주셔서 감사합니다.';
                res.json(textResponse);
            } else if(req.body.options.set == 'off') {
                textResponse.request.textContent.text = '인집사: 다음번에 꼭 친구추가 부탁드려요.';
                res.json(textResponse);
            } else {
                res.json(defaultResponse);
            }
            break;
        default:
            res.json(defaultResponse);
    }
});


app.get('/hook', function (reqeust, response) {
    response.writeHead(200, {'Content-Type' : 'text/html'});
    response.end('<h1>chatbot - skwjdgn@naver.com<h1>');
});

var sess;
var i = 0;
app.post('/hook', function (request, response) {
    if(sess === null || sess === '' || sess === undefined){
        sess = request.session;
        sess.username = [];
        sess.username[i] = null;
        sess.concierge = [];
        sess.concierge[i] = false;
        sess.spaces1 = [];
        sess.spaces1[i] = false;
        sess.spaces2 = [];
        sess.spaces2[i] = false;
        sess.spaces3 = [];
        sess.spaces3[i] = false;
        sess.specialtyRangeYN = [];
        sess.specialtyRangeYN[i] = false;
        sess.spaceBrandingYN = [];
        sess.spaceBrandingYN[i] = false;
        sess.spaceMeasure = [];
        sess.spaceMeasure[i] = false;
        sess.budget = [];
        sess.budget[i] = false;
        sess.stylesYN = [];
        sess.stylesYN[i] = false;

        sess.estimate_Type = "interior";
        sess.spacesCategory = [];
        sess.spacesSubCategory = [];
        sess.spacesSpace = [];
        sess.specialtyRange = [];
        sess.spaceBranding = [];
        sess.py = [];
        sess.meter = [];
        sess.budgetMin = [];
        sess.budgetMax = [];
        sess.styles = [];


    }else{

    }

    var eventObj = request.body.events[0];
    var source = eventObj.source;
    var message = eventObj.message;


    // request log
    console.log('======================', new Date() ,'======================');
    console.log('[request]', request.body);
    console.log('[request source] ', eventObj.source);
    console.log('[request message]', eventObj.message);

    if(message.type == "text" && message.text.indexOf("인집사") != -1){

        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionBasic.getBasicExpress());
    }
    else if(message.type == "text" && message.text.indexOf("인집사") === -1){

        if(message.text.indexOf("컨시어지") != -1){
            //세션새로 생성
            if(sess.username[i] === null || sess.username[i] === '' || sess.username[i] === undefined){
                sess.username[i] = eventObj.source.userId;
            }else{

                if(eventObj.source.userId !== sess.username[i]){
                    for(var j = 0; j<sess.username.length; j++){
                        //세션 변경
                        if(sess.username[j] ===  eventObj.source.userId) {
                            //기존 세션
                            i = j;
                            break;
                        }else{
                            //바뀌는 세션
                            sess.username[i+1] =  eventObj.source.userId;
                            i++;
                            break;
                        }
                    }
                }else{

                }
               
            }
            sess.concierge[i] = true;
            sess.spaces1[i] = true;
            reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces1",''));
        }else{

            if(sess.concierge[i] === true){
                if(eventObj.source.userId !== sess.username[i]){
                    for(var j = 0; j<sess.username.length; j++){
                        //세션 변경
                        if(sess.username[j] ===  eventObj.source.userId) {
                            //기존 세션
                            i = j;
                            break;
                        }
                    }
                }else{

                }

                if(sess.spaces1[i] === true){
                    if(message.text.indexOf("상업공간") != -1){
                        sess.spacesCategory[i]='1';

                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces2",'1'));

                    } else if(message.text.indexOf("업무공간") != -1){
                        sess.spacesCategory[i]='2';

                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces2",'2'));

                    }else if(message.text.indexOf("주거공간") != -1){
                        sess.spacesCategory[i]='3';

                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces2",'3'));

                    }else if(message.text.indexOf("문화/종교공간") != -1){
                        sess.spacesCategory[i]='4';

                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces2",'4'));

                    }else if(message.text.indexOf("기타공간") != -1){
                        sess.spacesCategory[i]='5';

                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces2",'5'));

                    }else{
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces1",''));
                    }

                    sess.spaces1[i] = false;
                    sess.spaces2[i] = true;

                }else if(sess.spaces2[i] === true) {

                    var result = actionConcierge.getSpaces2(sess.spacesCategory[i],message.text);

                    sess.spacesSubCategory[i] = result;
                    var params = [];
                    params[0] = sess.spacesCategory[i];
                    params[1] = result;
                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaces3",params));

                    sess.spaces2[i] = false;
                    sess.spaces3[i] = true;

                }else if(sess.spaces3[i] === true){
                    var result = actionConcierge.getSpaces3(sess.spacesCategory[i],sess.spacesSubCategory[i],message.text);

                    sess.spacesSpace[i] = result;

                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("specialtyRange",''));
                    sess.spaces3[i] = false;
                    sess.specialtyRangeYN[i] = true;
                }else if(sess.specialtyRangeYN[i] === true){

                    var result = actionConcierge.getSpecialtyRange(message.text);

                    sess.specialtyRange[i] = result;

                    sess.specialtyRangeYN[i] = false;

                    if(sess.specialtyRange[i][0] === 'interiorFull' ||  sess.specialtyRange[i][0] === 'interiorDesign'){
                        sess.spaceBrandingYN[i] = true;
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaceBranding",''));
                    }else{
                        sess.spaceMeasure[i] = true;
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaceMeasure",''));

                    }

                }else if(sess.spaceBrandingYN[i] === true){

                    if(message.text.indexOf("네") != -1){
                        sess.spaceBranding[i] = true;
                    }else{
                        sess.spaceBranding[i] = false;
                    }


                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("spaceMeasure",''));
                    sess.spaceBrandingYN[i] = false;
                    sess.spaceMeasure[i] = true;

                }else if(sess.spaceMeasure[i] === true){

                    var result = actionConcierge.getMeasure(message.text);

                    sess.py[i] = result[0];
                    sess.meter[i] = result[1];

                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("budget",''));
                    sess.spaceMeasure[i] = false;
                    sess.budget[i] = true;

                }else if(sess.budget[i] === true){

                    var result = [];
                    var msg = message.text;
                    msg = msg.trim();
                    var pattern = /\s/g; // 공백여부

                    if(msg.indexOf("~") != -1){
                        result = msg.split("~");
                        sess.budgetMin[i] = result[0];
                        sess.budgetMax[i] = result[1];
                    }else if(msg.match(pattern)){
                        result = msg.split(" ");
                        sess.budgetMin[i] = result[0];
                        sess.budgetMax[i] = result[1];
                    }else if(msg.match(/[0-9]/)){
                        sess.budgetMin[i] = msg;
                        sess.budgetMax[i] = msg;
                    }else{
                        sess.budgetMin[i] = 0;
                        sess.budgetMax[i] = 100000;
                    }

                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("styles",''));
                    sess.budget[i] = false;
                    sess.stylesYN[i] = true;

                }else if(sess.stylesYN[i] === true){

                    var result = actionConcierge.getStyles(message.text);

                    sess.styles[i] = result;

                    var formData = {};
                        formData.specialty = {};
                        formData.specialty.main = "interior";
                        formData.specialty.sub = sess.specialtyRange[i];
                        formData.spaces = {};
                        formData.spaces.category = sess.spacesCategory[i];
                        formData.spaces.subcategory = sess.spacesSubCategory[i];
                        formData.spaces.space = sess.spacesSpace[i];
                        formData.spaceBranding = sess.spaceBranding[i];
                        formData.measure = {};
                        formData.measure.meter = sess.meter[i];
                        formData.measure.py = sess.py[i];
                        formData.budget = {};
                        formData.budget.min = sess.budgetMin[i];
                        formData.budget.max = sess.budgetMax[i];
                        formData.style = sess.styles[i];

                    sess.stylesYN[i] = false;
                    sess.concierge[i] === false;


                    if ( !formData.specialty.main
                        || ( !(formData.specialty.main === 'interior') && !(formData.specialty.main === 'construction')) ) {
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("error",''));
                        return false;
                    }
                    if ( !formData.spaces.category || !formData.spaces.space || !formData.spaces.subcategory) {
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("error",''));
                        return false;
                    }
                    if ( !formData.specialty.sub.length) {
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("error",''));
                        return false;
                    }
                    if ( (!formData.measure.meter) || (!formData.measure.py)
                        || !(formData.measure.meter > -1) ) {
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("error",''));
                        return false;
                    }
                    if ( (!formData.budget.min) || (!formData.budget.max)
                        || !(formData.budget.min > -1) || !(formData.budget.max > -1)
                        || (parseInt(formData.budget.min) > parseInt(formData.budget.max)) ) {
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("error",''));
                        return false;
                    }
                    if ( !formData.style) {
                        reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionConcierge.getConciergeExpress("error",''));
                        return false;
                    }
                    
                    reply.concierge(formData,eventObj);

                }
                 else{
                    reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionBasic.getBasicExpress());
                }

            }else{
                reply.send(config.CHANNEL_ACCESS_TOKEN, eventObj.replyToken, actionBasic.getBasicExpress());
            }


        }

    }

    response.sendStatus(200);
});
//


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
